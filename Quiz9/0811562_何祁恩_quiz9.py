# -*- coding: utf-8 -*-
"""0811562_何祁恩_quiz9.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1JIzm7Wzg_RC4q6B8uZw7UvRbSbBSH9AI

# Rules
* Internet and Books are ALLOWED
* Name your file as following: StudentID_ChineseName/EnglishName_quiz#
* Extension of your file or your file type should be .py

# Logistic regression
- Using logistic regression predicting on MNIST database with multiple classes.

## Part I

Use the MNIST data
"""

from sklearn.datasets import fetch_openml
mnist = fetch_openml(data_id=554)

"""Split into training and test with sklearn

-Training dataset(60000,784) . Test dataset(10000,784)

"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(mnist.data, mnist.target,test_size=1/7, random_state=0)
print(X_train.shape, X_test.shape, y_train.shape, y_test.shape)

"""Use logistic model from sklearn. 
* Set the max_iteration to 1000.
* Set n_jobs to 5.
"""

from sklearn.linear_model import LogisticRegression
myModel = LogisticRegression(max_iter=1000, n_jobs=5)
myModel.fit(X_train, y_train)
print(myModel)

"""Predict the model using test data. Check the accuracy by comparing the prediction with the label. **Remember to use test data, not train data!!**
The result can be in **the scale of 0 to 1** or **percentage (%)**.
"""

score = myModel.score(X_test, y_test)
print(score)

"""Show the confusion matrix. Check **metrics from sklearn** for confusion matrix!"""

from sklearn import metrics
result = myModel.predict(X_test)
confusionMatrix = metrics.confusion_matrix(y_true=y_test, y_pred = result, labels = myModel.classes_)
print(confusionMatrix)

"""Using seaborn to visualize the confusion matrix"""

import seaborn as sns
import matplotlib.pyplot as plt

plt.figure(figsize=(12,12))
sns.heatmap(confusionMatrix, annot=True, linewidths=.5, square = True, cmap = 'Blues_r', fmt='0.4g');

plt.ylabel('Actual label')
plt.xlabel('Predicted label')
all_sample_title = 'Accuracy Score: {0}'.format(score)
plt.title(all_sample_title)